{
    "sourceFile": "app/seed/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1726776583008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726776633611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,122 @@\n-// import bcrypt from 'bcrypt';\n-// import { db } from '@vercel/postgres';\n-// import { invoices, customers, revenue, users } from '../lib/placeholder-data';\n+import bcrypt from 'bcrypt';\n+import { db } from '@vercel/postgres';\n+import { invoices, customers, revenue, users } from '../lib/placeholder-data';\n \n-// const client = await db.connect();\n+const client = await db.connect();\n \n-// async function seedUsers() {\n-//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n-//   await client.sql`\n-//     CREATE TABLE IF NOT EXISTS users (\n-//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n-//       name VARCHAR(255) NOT NULL,\n-//       email TEXT NOT NULL UNIQUE,\n-//       password TEXT NOT NULL\n-//     );\n-//   `;\n+async function seedUsers() {\n+  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n+  await client.sql`\n+    CREATE TABLE IF NOT EXISTS users (\n+      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n+      name VARCHAR(255) NOT NULL,\n+      email TEXT NOT NULL UNIQUE,\n+      password TEXT NOT NULL\n+    );\n+  `;\n \n-//   const insertedUsers = await Promise.all(\n-//     users.map(async (user) => {\n-//       const hashedPassword = await bcrypt.hash(user.password, 10);\n-//       return client.sql`\n-//         INSERT INTO users (id, name, email, password)\n-//         VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\n-//         ON CONFLICT (id) DO NOTHING;\n-//       `;\n-//     }),\n-//   );\n+  const insertedUsers = await Promise.all(\n+    users.map(async (user) => {\n+      const hashedPassword = await bcrypt.hash(user.password, 10);\n+      return client.sql`\n+        INSERT INTO users (id, name, email, password)\n+        VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\n+        ON CONFLICT (id) DO NOTHING;\n+      `;\n+    }),\n+  );\n \n-//   return insertedUsers;\n-// }\n+  return insertedUsers;\n+}\n \n-// async function seedInvoices() {\n-//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n+async function seedInvoices() {\n+  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n \n-//   await client.sql`\n-//     CREATE TABLE IF NOT EXISTS invoices (\n-//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n-//       customer_id UUID NOT NULL,\n-//       amount INT NOT NULL,\n-//       status VARCHAR(255) NOT NULL,\n-//       date DATE NOT NULL\n-//     );\n-//   `;\n+  await client.sql`\n+    CREATE TABLE IF NOT EXISTS invoices (\n+      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n+      customer_id UUID NOT NULL,\n+      amount INT NOT NULL,\n+      status VARCHAR(255) NOT NULL,\n+      date DATE NOT NULL\n+    );\n+  `;\n \n-//   const insertedInvoices = await Promise.all(\n-//     invoices.map(\n-//       (invoice) => client.sql`\n-//         INSERT INTO invoices (customer_id, amount, status, date)\n-//         VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\n-//         ON CONFLICT (id) DO NOTHING;\n-//       `,\n-//     ),\n-//   );\n+  const insertedInvoices = await Promise.all(\n+    invoices.map(\n+      (invoice) => client.sql`\n+        INSERT INTO invoices (customer_id, amount, status, date)\n+        VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\n+        ON CONFLICT (id) DO NOTHING;\n+      `,\n+    ),\n+  );\n \n-//   return insertedInvoices;\n-// }\n+  return insertedInvoices;\n+}\n \n-// async function seedCustomers() {\n-//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n+async function seedCustomers() {\n+  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n \n-//   await client.sql`\n-//     CREATE TABLE IF NOT EXISTS customers (\n-//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n-//       name VARCHAR(255) NOT NULL,\n-//       email VARCHAR(255) NOT NULL,\n-//       image_url VARCHAR(255) NOT NULL\n-//     );\n-//   `;\n+  await client.sql`\n+    CREATE TABLE IF NOT EXISTS customers (\n+      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n+      name VARCHAR(255) NOT NULL,\n+      email VARCHAR(255) NOT NULL,\n+      image_url VARCHAR(255) NOT NULL\n+    );\n+  `;\n \n-//   const insertedCustomers = await Promise.all(\n-//     customers.map(\n-//       (customer) => client.sql`\n-//         INSERT INTO customers (id, name, email, image_url)\n-//         VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\n-//         ON CONFLICT (id) DO NOTHING;\n-//       `,\n-//     ),\n-//   );\n+  const insertedCustomers = await Promise.all(\n+    customers.map(\n+      (customer) => client.sql`\n+        INSERT INTO customers (id, name, email, image_url)\n+        VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\n+        ON CONFLICT (id) DO NOTHING;\n+      `,\n+    ),\n+  );\n \n-//   return insertedCustomers;\n-// }\n+  return insertedCustomers;\n+}\n \n-// async function seedRevenue() {\n-//   await client.sql`\n-//     CREATE TABLE IF NOT EXISTS revenue (\n-//       month VARCHAR(4) NOT NULL UNIQUE,\n-//       revenue INT NOT NULL\n-//     );\n-//   `;\n+async function seedRevenue() {\n+  await client.sql`\n+    CREATE TABLE IF NOT EXISTS revenue (\n+      month VARCHAR(4) NOT NULL UNIQUE,\n+      revenue INT NOT NULL\n+    );\n+  `;\n \n-//   const insertedRevenue = await Promise.all(\n-//     revenue.map(\n-//       (rev) => client.sql`\n-//         INSERT INTO revenue (month, revenue)\n-//         VALUES (${rev.month}, ${rev.revenue})\n-//         ON CONFLICT (month) DO NOTHING;\n-//       `,\n-//     ),\n-//   );\n+  const insertedRevenue = await Promise.all(\n+    revenue.map(\n+      (rev) => client.sql`\n+        INSERT INTO revenue (month, revenue)\n+        VALUES (${rev.month}, ${rev.revenue})\n+        ON CONFLICT (month) DO NOTHING;\n+      `,\n+    ),\n+  );\n \n-//   return insertedRevenue;\n-// }\n+  return insertedRevenue;\n+}\n \n export async function GET() {\n   return Response.json({\n     message:\n       'Uncomment this file and remove this line. You can delete this file when you are finished.',\n   });\n-  // try {\n-  //   await client.sql`BEGIN`;\n-  //   await seedUsers();\n-  //   await seedCustomers();\n-  //   await seedInvoices();\n-  //   await seedRevenue();\n-  //   await client.sql`COMMIT`;\n+  try {\n+    await client.sql`BEGIN`;\n+    await seedUsers();\n+    await seedCustomers();\n+    await seedInvoices();\n+    await seedRevenue();\n+    await client.sql`COMMIT`;\n \n-  //   return Response.json({ message: 'Database seeded successfully' });\n-  // } catch (error) {\n-  //   await client.sql`ROLLBACK`;\n-  //   return Response.json({ error }, { status: 500 });\n-  // }\n+    return Response.json({ message: 'Database seeded successfully' });\n+  } catch (error) {\n+    await client.sql`ROLLBACK`;\n+    return Response.json({ error }, { status: 500 });\n+  }\n }\n"
                },
                {
                    "date": 1726776657445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     CREATE TABLE IF NOT EXISTS users (\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       email TEXT NOT NULL UNIQUE,\n-      password TEXT NOT NULL\n+      password TEXT NOT NULLayrn dev\n     );\n   `;\n \n   const insertedUsers = await Promise.all(\n"
                },
                {
                    "date": 1726777269699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     CREATE TABLE IF NOT EXISTS users (\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       email TEXT NOT NULL UNIQUE,\n-      password TEXT NOT NULLayrn dev\n+      password TEXT NOT NULL\n     );\n   `;\n \n   const insertedUsers = await Promise.all(\n@@ -101,12 +101,12 @@\n   return insertedRevenue;\n }\n \n export async function GET() {\n-  return Response.json({\n-    message:\n-      'Uncomment this file and remove this line. You can delete this file when you are finished.',\n-  });\n+  // return Response.json({\n+  //   message:\n+  //     'Uncomment this file and remove this line. You can delete this file when you are finished.',\n+  // });\n   try {\n     await client.sql`BEGIN`;\n     await seedUsers();\n     await seedCustomers();\n"
                }
            ],
            "date": 1726776583008,
            "name": "Commit-0",
            "content": "// import bcrypt from 'bcrypt';\n// import { db } from '@vercel/postgres';\n// import { invoices, customers, revenue, users } from '../lib/placeholder-data';\n\n// const client = await db.connect();\n\n// async function seedUsers() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS users (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email TEXT NOT NULL UNIQUE,\n//       password TEXT NOT NULL\n//     );\n//   `;\n\n//   const insertedUsers = await Promise.all(\n//     users.map(async (user) => {\n//       const hashedPassword = await bcrypt.hash(user.password, 10);\n//       return client.sql`\n//         INSERT INTO users (id, name, email, password)\n//         VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\n//         ON CONFLICT (id) DO NOTHING;\n//       `;\n//     }),\n//   );\n\n//   return insertedUsers;\n// }\n\n// async function seedInvoices() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS invoices (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       customer_id UUID NOT NULL,\n//       amount INT NOT NULL,\n//       status VARCHAR(255) NOT NULL,\n//       date DATE NOT NULL\n//     );\n//   `;\n\n//   const insertedInvoices = await Promise.all(\n//     invoices.map(\n//       (invoice) => client.sql`\n//         INSERT INTO invoices (customer_id, amount, status, date)\n//         VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\n//         ON CONFLICT (id) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedInvoices;\n// }\n\n// async function seedCustomers() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS customers (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email VARCHAR(255) NOT NULL,\n//       image_url VARCHAR(255) NOT NULL\n//     );\n//   `;\n\n//   const insertedCustomers = await Promise.all(\n//     customers.map(\n//       (customer) => client.sql`\n//         INSERT INTO customers (id, name, email, image_url)\n//         VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\n//         ON CONFLICT (id) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedCustomers;\n// }\n\n// async function seedRevenue() {\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS revenue (\n//       month VARCHAR(4) NOT NULL UNIQUE,\n//       revenue INT NOT NULL\n//     );\n//   `;\n\n//   const insertedRevenue = await Promise.all(\n//     revenue.map(\n//       (rev) => client.sql`\n//         INSERT INTO revenue (month, revenue)\n//         VALUES (${rev.month}, ${rev.revenue})\n//         ON CONFLICT (month) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedRevenue;\n// }\n\nexport async function GET() {\n  return Response.json({\n    message:\n      'Uncomment this file and remove this line. You can delete this file when you are finished.',\n  });\n  // try {\n  //   await client.sql`BEGIN`;\n  //   await seedUsers();\n  //   await seedCustomers();\n  //   await seedInvoices();\n  //   await seedRevenue();\n  //   await client.sql`COMMIT`;\n\n  //   return Response.json({ message: 'Database seeded successfully' });\n  // } catch (error) {\n  //   await client.sql`ROLLBACK`;\n  //   return Response.json({ error }, { status: 500 });\n  // }\n}\n"
        }
    ]
}